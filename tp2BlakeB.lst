     Assembly listing for: tp2BlakeB.mas
                Assembled: Mon Dec 02 23:09:09 CST 2019

         |                                                        /
         |                                                        / Term Project Part 2 (BubbleSort), Computer Organization I
         |                                                        / Name: Blake Brooks  
         |                                                        /
         |                        ORG 0                            
000 901B |                        JUMP start                       
001 0003 |  BAddr                 HEX 0003                        / DATA_B = 0003 (hex)
002 0019 |  EAddr                 HEX 0019                        / DATA_E = 0019 (hex)
         |                                                        
         |                                                        	/ data section begins
003 0512 |  DATA_B                HEX 0512                        / data begin
004 0091 |                        HEX 0091                         
005 0906 |                        HEX 0906                         
006 00CA |                        HEX 00CA                         
007 001A |                        HEX 001A                         
008 00AF |                        HEX 00AF                         
009 0C25 |                        HEX 0C25                         
00A 0038 |                        HEX 0038                         
00B 0131 |                        HEX 0131                         
00C 00B9 |                        HEX 00B9                         
00D 0039 |                        HEX 0039                         
00E 0050 |                        HEX 0050                         
00F 0005 |                        HEX 0005                         
010 00BD |                        HEX 00BD                         
011 065F |                        HEX 065F                         
012 0059 |                        HEX 0059                         
013 0F08 |                        HEX 0F08                         
014 0BAB |                        HEX 0BAB                         
015 0040 |                        HEX 0040                         
016 007A |                        HEX 007A                         
017 03D1 |                        HEX 03D1                         
018 0030 |                        HEX 0030                         
019 00FE |  DATA_E                HEX 00FE                        / data end
         |                                                        
01A 0017 |  Count                 DEC 23                          / the number of data
         |                                                        /
         |                                                        / do not modify codes above
         |                                                        / add code/data below
         |                                                        /
01B 106D |  start                 LOAD ZERO                       / Your first instruction begins here!!!
01C 206E |                        STORE OutLoop                   /int OutLoop = ZERO;
01D 1001 |                        LOAD BAddr                       
01E 306C |                        ADD ONE                         /Add one to Beginning Address 
01F 2072 |                        STORE IndexLooking              /Store into accumulator
020 106D |                        LOAD ZERO                       /Load value of 0
021 2073 |                        STORE IndexComparing            /Store into the value of IndexComparing
022 106D |  while                 LOAD ZERO                        
023 2071 |                        STORE InLoop                     
024 1001 |                        LOAD BAddr                      /loading OutLoop for starting while loop
025 306C |                        ADD ONE                          
026 2072 |                        STORE IndexLooking               
027 106E |                        LOAD OutLoop                     
028 401A |                        SUBT Count                      /subtracting Count to compare the value in the accumulator to 0
029 8400 |                        SKIPCOND 400                    /if(OutLoop == Count)
02A 902C |                        JUMP while2                     / If what is in the accumulator is equal to 0, skip jump to 2nd while loop and jump to the 3rd
02B 904C |                        JUMP while3                     /break
02C 101A |  while2                LOAD Count                      /load count to start to subtract from OutLoop and compare to InLoop
02D 406E |                        SUBT OutLoop                     
02E 2076 |                        STORE tempCount                  
02F 1071 |                        LOAD InLoop                      
030 4076 |                        SUBT tempCount                   
031 8400 |                        SKIPCOND 400                    /if(InLoop == Count - Outloop)
032 9034 |                        JUMP if                         /if accumulator value is equal to zero, skip this line, otherwise jump to the if label
033 9048 |                        JUMP IncrementOutLoop           /break *****
034 1072 |  if                    LOAD IndexLooking               /loading value to start at 2nd database vale, database[1] in terms of C++
035 406C |                        SUBT ONE                        / subtracting 1 to look to the left of where we are currently looking and storing into IndexComparing
036 2073 |                        STORE IndexComparing             
037 D072 |                        LOADI IndexLooking              /load value of what is at the address of IndexLooking
038 2074 |                        STORE IndexLookingValue         /stroe the address value into variable
039 D073 |                        LOADI IndexComparing             
03A 4074 |                        SUBT IndexLookingValue           
03B 8800 |                        SKIPCOND 800                    /if(Data[InLoop - ONE] > Data[InLoop]
03C 903E |                        JUMP IncrementIndexLooking       
03D 905E |                        JUMP SwapSubProgram              
03E 1072 |  IncrementIndexLooking LOAD IndexLooking                
03F 306C |                        ADD ONE                          
040 2072 |                        STORE IndexLooking               
041 1071 |  IncrementInLoop       LOAD InLoop                      
042 306C |                        ADD ONE                          
043 2071 |                        STORE InLoop                    /InLoop = InLoop + ONE;
044 4076 |                        SUBT tempCount                   
045 8400 |                        SKIPCOND 400                     
046 902C |                        JUMP while2                     /jump to the 2nd while loop label
047 9048 |                        JUMP IncrementOutLoop            
048 106E |  IncrementOutLoop      LOAD OutLoop                     
049 306C |                        ADD ONE                          
04A 206E |                        STORE OutLoop                   /OutLoop = OutLoop + ONE;
04B 9022 |                        JUMP while                      /jump to the first while loop
04C 1002 |  while3                LOAD EAddr                      / load the value of ending address
04D 306C |                        ADD ONE                         /Add one to Ending address
04E 2077 |                        STORE tempEnd                   /store it into tempend
04F 1075 |                        LOAD IndexIncrement             /load IndexIncrement variable
050 2070 |                        STORE Index                      
051 4077 |                        SUBT tempEnd                     
052 8400 |                        SKIPCOND 400                    / if values are equal then skip the dopart label and halt the program
053 9055 |                        JUMP dopart                      
054 906B |                        JUMP endif                       
055 D070 |  dopart                LOADI Index                     /load the value stored at the address of Index
056 6000 |                        OUTPUT                          /output the value
057 1070 |                        LOAD Index                      /load value of Index
058 306C |                        ADD ONE                         /Add one to look at next part of database
059 2070 |                        STORE Index                     /store in Index 
05A 1075 |                        LOAD IndexIncrement              
05B 306C |                        ADD ONE                          
05C 2075 |                        STORE IndexIncrement             
05D 904C |                        JUMP while3                     /jump to the 3rd while loop label
05E D073 |  SwapSubProgram        LOADI IndexComparing             
05F 206F |                        STORE temp                      /int temp = a;	
060 D072 |                        LOADI IndexLooking               
061 E073 |                        STOREI IndexComparing           /a = b;
062 106F |                        LOAD temp                        
063 E072 |                        STOREI IndexLooking             /b = temp;
064 1002 |  ifcomparing           LOAD EAddr                       
065 2077 |                        STORE tempEnd                    
066 1072 |                        LOAD IndexLooking                
067 4077 |                        SUBT tempEnd                    /Check to make sure that we aren't outside the database range
068 8400 |                        SKIPCOND 400                    /If the value of the accumulator is less than 0 then skip while3 label
069 902C |                        JUMP while2                      
06A 9048 |                        JUMP IncrementOutLoop            
06B 7000 |  endif                 HALT                             
06C 0001 |  ONE                   DEC 1                           / int ONE = 1;
06D 0000 |  ZERO                  DEC 0                           /int ZERO = 0;
06E 0000 |  OutLoop               DEC 0                           / int OutLoop = ZERO;
06F 0000 |  temp                  DEC 0                            
070 0000 |  Index                 DEC 0                           /int Index = ZERO;
071 0000 |  InLoop                DEC 0                            
072 0000 |  IndexLooking          DEC 0                            
073 0000 |  IndexComparing        DEC 0                            
074 0000 |  IndexLookingValue     DEC 0                            
075 0003 |  IndexIncrement        HEX 0003                         
076 0000 |  tempCount             DEC 0                            
077 0000 |  tempEnd               HEX 0000                         

Assembly successful.

         SYMBOL TABLE
         -----------------------------------------------------------------
          Symbol                | Defined | References 
         -----------------------+---------+-------------------------------
          BAddr                 |   001   | 01D, 024
          Count                 |   01A   | 028, 02C
          DATA_B                |   003   | 
          DATA_E                |   019   | 
          EAddr                 |   002   | 04C, 064
          InLoop                |   071   | 023, 02F, 041, 043
          IncrementInLoop       |   041   | 
          IncrementIndexLooking |   03E   | 03C
          IncrementOutLoop      |   048   | 033, 047, 06A
          Index                 |   070   | 050, 055, 057, 059
          IndexComparing        |   073   | 021, 036, 039, 05E, 061
          IndexIncrement        |   075   | 04F, 05A, 05C
          IndexLooking          |   072   | 01F, 026, 034, 037, 03E, 040, 
                                |         | 060, 063, 066
          IndexLookingValue     |   074   | 038, 03A
          ONE                   |   06C   | 01E, 025, 035, 03F, 042, 049, 
                                |         | 04D, 058, 05B
          OutLoop               |   06E   | 01C, 027, 02D, 048, 04A
          SwapSubProgram        |   05E   | 03D
          ZERO                  |   06D   | 01B, 020, 022
          dopart                |   055   | 053
          endif                 |   06B   | 054
          if                    |   034   | 032
          ifcomparing           |   064   | 
          start                 |   01B   | 000
          temp                  |   06F   | 05F, 062
          tempCount             |   076   | 02E, 030, 044
          tempEnd               |   077   | 04E, 051, 065, 067
          while                 |   022   | 04B
          while2                |   02C   | 02A, 046, 069
          while3                |   04C   | 02B, 05D
         -----------------------------------------------------------------

