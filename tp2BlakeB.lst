     Assembly listing for: tp2BlakeB.mas
                Assembled: Sun Dec 01 01:00:18 CST 2019

         |                                                        /
         |                                                        / Term Project Part 2 (BubbleSort), Computer Organization I
         |                                                        / Name: Blake Brooks  
         |                                                        /
         |                        ORG 0                            
000 901B |                        JUMP start                       
001 0003 |  BAddr                 HEX 0003                        / DATA_B = 0003 (hex)
002 0019 |  EAddr                 HEX 0019                        / DATA_E = 0019 (hex)
         |                                                        
         |                                                        	/ data section begins
003 0512 |  DATA_B                HEX 0512                        / data begin
004 0091 |                        HEX 0091                         
005 0906 |                        HEX 0906                         
006 00CA |                        HEX 00CA                         
007 001A |                        HEX 001A                         
008 00AF |                        HEX 00AF                         
009 0C25 |                        HEX 0C25                         
00A 0038 |                        HEX 0038                         
00B 0131 |                        HEX 0131                         
00C 00B9 |                        HEX 00B9                         
00D 0039 |                        HEX 0039                         
00E 0050 |                        HEX 0050                         
00F 0005 |                        HEX 0005                         
010 00BD |                        HEX 00BD                         
011 065F |                        HEX 065F                         
012 0059 |                        HEX 0059                         
013 0F08 |                        HEX 0F08                         
014 0BAB |                        HEX 0BAB                         
015 0040 |                        HEX 0040                         
016 007A |                        HEX 007A                         
017 03D1 |                        HEX 03D1                         
018 0030 |                        HEX 0030                         
019 00FE |  DATA_E                HEX 00FE                        / data end
         |                                                        
01A 0017 |  Count                 DEC 23                          / the number of data
         |                                                        /
         |                                                        / do not modify codes above
         |                                                        / add code/data below
         |                                                        /
01B 1062 |  start                 LOAD ZERO                       / Your first instruction begins here!!!
01C 2063 |                        STORE OutLoop                   /int OutLoop = ZERO;
01D 1001 |                        LOAD BAddr                       
01E 3061 |                        ADD ONE                         /Add one to Beginning Address 
01F 2067 |                        STORE IndexLooking              /Store into accumulator
020 1062 |                        LOAD ZERO                       /Load value of 0
021 2068 |                        STORE IndexComparing            /Store into the value of IndexComparing
022 1061 |  while                 LOAD ONE                         
023 2066 |                        STORE InLoop                     
024 1063 |                        LOAD OutLoop                    /loading OutLoop for starting while loop
025 401A |                        SUBT Count                      /subtracting Count to compare the value in the accumulator to 0
026 8400 |                        SKIPCOND 400                    /if(OutLoop == Count)
027 9029 |                        JUMP while2                     / If what is in the accumulator is equal to 0, skip jump to 2nd while loop and jump to the 3rd
028 9046 |                        JUMP while3                     /break
029 101A |  while2                LOAD Count                      /load count to start to subtract from OutLoop and compare to InLoop
02A 4063 |                        SUBT OutLoop                     
02B 201A |                        STORE Count                      
02C 1066 |                        LOAD InLoop                      
02D 401A |                        SUBT Count                       
02E 8400 |                        SKIPCOND 400                    /if(InLoop == Count - Outloop)
02F 9031 |                        JUMP if                         /if accumulator value is equal to zero, skip this line, otherwise jump to the if label
030 9046 |                        JUMP while3                     /break
031 1067 |  if                    LOAD IndexLooking               /loading value to start at 2nd database vale, database[1] in terms of C++
032 4061 |                        SUBT ONE                        / subtracting 1 to look to the left of where we are currently looking and storing into IndexComparing
033 2068 |                        STORE IndexComparing             
034 D067 |                        LOADI IndexLooking              /load value of what is at the address of IndexLooking
035 2069 |                        STORE IndexLookingValue         /stroe the address value into variable
036 D068 |                        LOADI IndexComparing             
037 4069 |                        SUBT IndexLookingValue           
038 8800 |                        SKIPCOND 800                    /if(Data[InLoop - ONE] > Data[InLoop]
039 903B |                        JUMP IncrementIndexLooking       
03A 9055 |                        JUMP SwapSubProgram              
03B 1067 |  IncrementIndexLooking LOAD IndexLooking                
03C 3061 |                        ADD ONE                          
03D 2067 |                        STORE IndexLooking               
03E 1066 |  IncrementInLoop       LOAD InLoop                      
03F 3061 |                        ADD ONE                          
040 2066 |                        STORE InLoop                    /InLoop = InLoop + ONE;
041 9029 |                        JUMP while2                     /jump to the 2nd while loop label
042 1063 |  IncrementOutLoop      LOAD OutLoop                     
043 3061 |                        ADD ONE                          
044 2063 |                        STORE OutLoop                   /OutLoop = OutLoop + ONE;
045 9022 |                        JUMP while                      /jump to the first while loop
046 106A |  while3                LOAD IndexIncrement             / load the value of the IndexIncrement variable
047 2065 |                        STORE Index                     /store it into Index
048 4002 |                        SUBT EAddr                      /subtract index from ending address to make sure the index is in range of database values
049 8400 |                        SKIPCOND 400                    / if values are equal then skip the dopart label and halt the program
04A 904C |                        JUMP dopart                      
04B 9060 |                        JUMP endif                       
04C D065 |  dopart                LOADI Index                     /load the value stored at the address of Index
04D 6000 |                        OUTPUT                          /output the value
04E 1065 |                        LOAD Index                      /load value of Index
04F 3061 |                        ADD ONE                         /Add one to look at next part of database
050 2065 |                        STORE Index                     /store in Index 
051 106A |                        LOAD IndexIncrement              
052 3061 |                        ADD ONE                          
053 206A |                        STORE IndexIncrement             
054 9046 |                        JUMP while3                     /jump to the 3rd while loop label
055 D068 |  SwapSubProgram        LOADI IndexComparing             
056 2064 |                        STORE temp                      /int temp = a;	
057 D067 |                        LOADI IndexLooking               
058 E068 |                        STOREI IndexComparing           /a = b;
059 1064 |                        LOAD temp                        
05A E067 |                        STOREI IndexLooking             /b = temp;
05B 1068 |  ifcomparing           LOAD IndexComparing              
05C 4002 |                        SUBT EAddr                      /Check to make sure that we aren't outside the database range
05D 8000 |                        SKIPCOND 000                    /If the value of the accumulator is less than 0 then skip while3 label
05E 9029 |                        JUMP while2                      
05F 9042 |                        JUMP IncrementOutLoop            
060 7000 |  endif                 HALT                             
061 0001 |  ONE                   DEC 1                           / int ONE = 1;
062 0000 |  ZERO                  DEC 0                           /int ZERO = 0;
063 0000 |  OutLoop               DEC 0                           / int OutLoop = ZERO;
064 0000 |  temp                  DEC 0                            
065 0000 |  Index                 DEC 0                           /int Index = ZERO;
066 0000 |  InLoop                DEC 0                            
067 0000 |  IndexLooking          DEC 0                            
068 0000 |  IndexComparing        DEC 0                            
069 0000 |  IndexLookingValue     DEC 0                            
06A 0003 |  IndexIncrement        HEX 0003                         

Assembly successful.

         SYMBOL TABLE
         -----------------------------------------------------------------
          Symbol                | Defined | References 
         -----------------------+---------+-------------------------------
          BAddr                 |   001   | 01D
          Count                 |   01A   | 025, 029, 02B, 02D
          DATA_B                |   003   | 
          DATA_E                |   019   | 
          EAddr                 |   002   | 048, 05C
          InLoop                |   066   | 023, 02C, 03E, 040
          IncrementInLoop       |   03E   | 
          IncrementIndexLooking |   03B   | 039
          IncrementOutLoop      |   042   | 05F
          Index                 |   065   | 047, 04C, 04E, 050
          IndexComparing        |   068   | 021, 033, 036, 055, 058, 05B
          IndexIncrement        |   06A   | 046, 051, 053
          IndexLooking          |   067   | 01F, 031, 034, 03B, 03D, 057, 
                                |         | 05A
          IndexLookingValue     |   069   | 035, 037
          ONE                   |   061   | 01E, 022, 032, 03C, 03F, 043, 
                                |         | 04F, 052
          OutLoop               |   063   | 01C, 024, 02A, 042, 044
          SwapSubProgram        |   055   | 03A
          ZERO                  |   062   | 01B, 020
          dopart                |   04C   | 04A
          endif                 |   060   | 04B
          if                    |   031   | 02F
          ifcomparing           |   05B   | 
          start                 |   01B   | 000
          temp                  |   064   | 056, 059
          while                 |   022   | 045
          while2                |   029   | 027, 041, 05E
          while3                |   046   | 028, 030, 054
         -----------------------------------------------------------------

