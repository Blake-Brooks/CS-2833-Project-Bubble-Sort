     Assembly listing for: tp2BlakeB.mas
                Assembled: Sun Dec 01 17:34:50 CST 2019

         |                                                        /
         |                                                        / Term Project Part 2 (BubbleSort), Computer Organization I
         |                                                        / Name: Blake Brooks  
         |                                                        /
         |                        ORG 0                            
000 901B |                        JUMP start                       
001 0003 |  BAddr                 HEX 0003                        / DATA_B = 0003 (hex)
002 0019 |  EAddr                 HEX 0019                        / DATA_E = 0019 (hex)
         |                                                        
         |                                                        	/ data section begins
003 0512 |  DATA_B                HEX 0512                        / data begin
004 0091 |                        HEX 0091                         
005 0906 |                        HEX 0906                         
006 00CA |                        HEX 00CA                         
007 001A |                        HEX 001A                         
008 00AF |                        HEX 00AF                         
009 0C25 |                        HEX 0C25                         
00A 0038 |                        HEX 0038                         
00B 0131 |                        HEX 0131                         
00C 00B9 |                        HEX 00B9                         
00D 0039 |                        HEX 0039                         
00E 0050 |                        HEX 0050                         
00F 0005 |                        HEX 0005                         
010 00BD |                        HEX 00BD                         
011 065F |                        HEX 065F                         
012 0059 |                        HEX 0059                         
013 0F08 |                        HEX 0F08                         
014 0BAB |                        HEX 0BAB                         
015 0040 |                        HEX 0040                         
016 007A |                        HEX 007A                         
017 03D1 |                        HEX 03D1                         
018 0030 |                        HEX 0030                         
019 00FE |  DATA_E                HEX 00FE                        / data end
         |                                                        
01A 0017 |  Count                 DEC 23                          / the number of data
         |                                                        /
         |                                                        / do not modify codes above
         |                                                        / add code/data below
         |                                                        /
01B 1067 |  start                 LOAD ZERO                       / Your first instruction begins here!!!
01C 2068 |                        STORE OutLoop                   /int OutLoop = ZERO;
01D 1001 |                        LOAD BAddr                       
01E 3066 |                        ADD ONE                         /Add one to Beginning Address 
01F 206C |                        STORE IndexLooking              /Store into accumulator
020 1067 |                        LOAD ZERO                       /Load value of 0
021 206D |                        STORE IndexComparing            /Store into the value of IndexComparing
022 1067 |  while                 LOAD ZERO                        
023 206B |                        STORE InLoop                     
024 1001 |                        LOAD BAddr                      /loading OutLoop for starting while loop
025 3066 |                        ADD ONE                          
026 206C |                        STORE IndexLooking               
027 6000 |                        OUTPUT                           
028 1068 |                        LOAD OutLoop                     
029 401A |                        SUBT Count                      /subtracting Count to compare the value in the accumulator to 0
02A 8400 |                        SKIPCOND 400                    /if(OutLoop == Count)
02B 902D |                        JUMP while2                     / If what is in the accumulator is equal to 0, skip jump to 2nd while loop and jump to the 3rd
02C 904B |                        JUMP while3                     /break
02D 101A |  while2                LOAD Count                      /load count to start to subtract from OutLoop and compare to InLoop
02E 4068 |                        SUBT OutLoop                     
02F 2070 |                        STORE tempCount                  
030 106B |                        LOAD InLoop                      
031 4070 |                        SUBT tempCount                   
032 8400 |                        SKIPCOND 400                    /if(InLoop == Count - Outloop)
033 9035 |                        JUMP if                         /if accumulator value is equal to zero, skip this line, otherwise jump to the if label
034 9047 |                        JUMP IncrementOutLoop           /break
035 106C |  if                    LOAD IndexLooking               /loading value to start at 2nd database vale, database[1] in terms of C++
036 4066 |                        SUBT ONE                        / subtracting 1 to look to the left of where we are currently looking and storing into IndexComparing
037 206D |                        STORE IndexComparing             
038 D06C |                        LOADI IndexLooking              /load value of what is at the address of IndexLooking
039 206E |                        STORE IndexLookingValue         /stroe the address value into variable
03A D06D |                        LOADI IndexComparing             
03B 406E |                        SUBT IndexLookingValue           
03C 8800 |                        SKIPCOND 800                    /if(Data[InLoop - ONE] > Data[InLoop]
03D 903F |                        JUMP IncrementIndexLooking       
03E 905A |                        JUMP SwapSubProgram              
03F 106C |  IncrementIndexLooking LOAD IndexLooking                
040 3066 |                        ADD ONE                          
041 206C |                        STORE IndexLooking               
042 106B |  IncrementInLoop       LOAD InLoop                      
043 3066 |                        ADD ONE                          
044 206B |                        STORE InLoop                    /InLoop = InLoop + ONE;
045 6000 |                        OUTPUT                           
046 902D |                        JUMP while2                     /jump to the 2nd while loop label
047 1068 |  IncrementOutLoop      LOAD OutLoop                     
048 3066 |                        ADD ONE                          
049 2068 |                        STORE OutLoop                   /OutLoop = OutLoop + ONE;
04A 9022 |                        JUMP while                      /jump to the first while loop
04B 106F |  while3                LOAD IndexIncrement             / load the value of the IndexIncrement variable
04C 206A |                        STORE Index                     /store it into Index
04D 4002 |                        SUBT EAddr                      /subtract index from ending address to make sure the index is in range of database values
04E 8400 |                        SKIPCOND 400                    / if values are equal then skip the dopart label and halt the program
04F 9051 |                        JUMP dopart                      
050 9065 |                        JUMP endif                       
051 D06A |  dopart                LOADI Index                     /load the value stored at the address of Index
052 6000 |                        OUTPUT                          /output the value
053 106A |                        LOAD Index                      /load value of Index
054 3066 |                        ADD ONE                         /Add one to look at next part of database
055 206A |                        STORE Index                     /store in Index 
056 106F |                        LOAD IndexIncrement              
057 3066 |                        ADD ONE                          
058 206F |                        STORE IndexIncrement             
059 904B |                        JUMP while3                     /jump to the 3rd while loop label
05A D06D |  SwapSubProgram        LOADI IndexComparing             
05B 2069 |                        STORE temp                      /int temp = a;	
05C D06C |                        LOADI IndexLooking               
05D E06D |                        STOREI IndexComparing           /a = b;
05E 1069 |                        LOAD temp                        
05F E06C |                        STOREI IndexLooking             /b = temp;
060 106D |  ifcomparing           LOAD IndexComparing              
061 4002 |                        SUBT EAddr                      /Check to make sure that we aren't outside the database range
062 8400 |                        SKIPCOND 400                    /If the value of the accumulator is less than 0 then skip while3 label
063 902D |                        JUMP while2                      
064 9047 |                        JUMP IncrementOutLoop            
065 7000 |  endif                 HALT                             
066 0001 |  ONE                   DEC 1                           / int ONE = 1;
067 0000 |  ZERO                  DEC 0                           /int ZERO = 0;
068 0000 |  OutLoop               DEC 0                           / int OutLoop = ZERO;
069 0000 |  temp                  DEC 0                            
06A 0000 |  Index                 DEC 0                           /int Index = ZERO;
06B 0000 |  InLoop                DEC 0                            
06C 0000 |  IndexLooking          DEC 0                            
06D 0000 |  IndexComparing        DEC 0                            
06E 0000 |  IndexLookingValue     DEC 0                            
06F 0003 |  IndexIncrement        HEX 0003                         
070 0000 |  tempCount             DEC 0                            

Assembly successful.

         SYMBOL TABLE
         -----------------------------------------------------------------
          Symbol                | Defined | References 
         -----------------------+---------+-------------------------------
          BAddr                 |   001   | 01D, 024
          Count                 |   01A   | 029, 02D
          DATA_B                |   003   | 
          DATA_E                |   019   | 
          EAddr                 |   002   | 04D, 061
          InLoop                |   06B   | 023, 030, 042, 044
          IncrementInLoop       |   042   | 
          IncrementIndexLooking |   03F   | 03D
          IncrementOutLoop      |   047   | 034, 064
          Index                 |   06A   | 04C, 051, 053, 055
          IndexComparing        |   06D   | 021, 037, 03A, 05A, 05D, 060
          IndexIncrement        |   06F   | 04B, 056, 058
          IndexLooking          |   06C   | 01F, 026, 035, 038, 03F, 041, 
                                |         | 05C, 05F
          IndexLookingValue     |   06E   | 039, 03B
          ONE                   |   066   | 01E, 025, 036, 040, 043, 048, 
                                |         | 054, 057
          OutLoop               |   068   | 01C, 028, 02E, 047, 049
          SwapSubProgram        |   05A   | 03E
          ZERO                  |   067   | 01B, 020, 022
          dopart                |   051   | 04F
          endif                 |   065   | 050
          if                    |   035   | 033
          ifcomparing           |   060   | 
          start                 |   01B   | 000
          temp                  |   069   | 05B, 05E
          tempCount             |   070   | 02F, 031
          while                 |   022   | 04A
          while2                |   02D   | 02B, 046, 063
          while3                |   04B   | 02C, 059
         -----------------------------------------------------------------

