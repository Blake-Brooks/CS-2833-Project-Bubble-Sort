     Assembly listing for: tp2BlakeB.mas
                Assembled: Fri Nov 29 04:20:03 CST 2019

         |                                                        /
         |                                                        / Term Project Part 2 (BubbleSort), Computer Organization I
         |                                                        / Name:   
         |                                                        /
         |                        ORG 0                            
000 901B |                        JUMP start                       
001 0003 |  BAddr                 HEX 0003                        / DATA_B = 0003 (hex)
002 0019 |  EAddr                 HEX 0019                        / DATA_E = 0019 (hex)
         |                                                        
         |                                                        	/ data section begins
003 0512 |  DATA_B                HEX 0512                        / data begin
004 0091 |                        HEX 0091                         
005 0906 |                        HEX 0906                         
006 00CA |                        HEX 00CA                         
007 001A |                        HEX 001A                         
008 00AF |                        HEX 00AF                         
009 0C25 |                        HEX 0C25                         
00A 0038 |                        HEX 0038                         
00B 0131 |                        HEX 0131                         
00C 00B9 |                        HEX 00B9                         
00D 0039 |                        HEX 0039                         
00E 0050 |                        HEX 0050                         
00F 0005 |                        HEX 0005                         
010 00BD |                        HEX 00BD                         
011 065F |                        HEX 065F                         
012 0059 |                        HEX 0059                         
013 0F08 |                        HEX 0F08                         
014 0BAB |                        HEX 0BAB                         
015 0040 |                        HEX 0040                         
016 007A |                        HEX 007A                         
017 03D1 |                        HEX 03D1                         
018 0030 |                        HEX 0030                         
019 00FE |  DATA_E                HEX 00FE                        / data end
         |                                                        
01A 0017 |  Count                 DEC 23                          / the number of data
         |                                                        /
         |                                                        / do not modify codes above
         |                                                        / add code/data below
         |                                                        /
01B 1061 |  start                 LOAD ZERO                       / Your first instruction begins here!!!
01C 2062 |                        STORE OutLoop                   /int OutLoop = ZERO;
01D 1001 |                        LOAD BAddr                       
01E 3060 |                        ADD ONE                          
01F 2066 |                        STORE IndexLooking               
020 1061 |                        LOAD ZERO                        
021 2067 |                        STORE IndexComparing             
022 1062 |  while                 LOAD OutLoop                    /loading OutLoop for starting while loop
023 401A |                        SUBT Count                      /subtracting Count to compare the value in the accumulator to 0
024 8400 |                        SKIPCOND 400                    /if(OutLoop == Count)
025 9027 |                        JUMP while2                     / If what is in the accumulator is equal to 0, skip jump to 2nd while loop and jump to the 3rd
026 9045 |                        JUMP while3                     /break
027 101A |  while2                LOAD Count                      /load count to start to subtract from OutLoop and compare to InLoop
028 4062 |                        SUBT OutLoop                     
029 201A |                        STORE Count                      
02A 1065 |                        LOAD InLoop                      
02B 401A |                        SUBT Count                       
02C 8400 |                        SKIPCOND 400                    /if(InLoop == Count - Outloop)
02D 902F |                        JUMP if                         /if accumulator value is equal to zero, skip this line, otherwise jump to the if label
02E 9045 |                        JUMP while3                     /break
02F 1066 |  if                    LOAD IndexLooking               /loading value to start at 2nd database vale, database[1] in terms of C++
030 4060 |                        SUBT ONE                        / subtracting 1 to look to the left of where we are currently looking and storing into IndexComparing
031 2067 |                        STORE IndexComparing             
032 D066 |                        LOADI IndexLooking              /load value of what is at the address of IndexLooking
033 2068 |                        STORE IndexLookingValue          
034 D067 |                        LOADI IndexComparing             
035 4068 |                        SUBT IndexLookingValue           
036 8800 |                        SKIPCOND 800                    /if(Data[InLoop - ONE] > Data[InLoop]
037 9039 |                        JUMP IncrementIndexLooking       
038 9054 |                        JUMP SwapSubProgram              
039 1066 |  IncrementIndexLooking LOAD IndexLooking                
03A 3060 |                        ADD ONE                          
03B 2066 |                        STORE IndexLooking               
03C 9027 |                        JUMP while2                      
03D 1065 |  IncrementInLoop       LOAD InLoop                      
03E 3060 |                        ADD ONE                          
03F 2065 |                        STORE InLoop                     
040 9027 |                        JUMP while2                      
041 1062 |  IncrementOutLoop      LOAD OutLoop                     
042 3060 |                        ADD ONE                          
043 2062 |                        STORE OutLoop                    
044 9022 |                        JUMP while                       
045 1069 |  while3                LOAD IndexIncrement              
046 2064 |                        STORE Index                      
047 4002 |                        SUBT EAddr                       
048 8400 |                        SKIPCOND 400                     
049 904B |                        JUMP dopart                      
04A 905F |                        JUMP endif                       
04B D064 |  dopart                LOADI Index                      
04C 6000 |                        OUTPUT                           
04D 1064 |                        LOAD Index                       
04E 3060 |                        ADD ONE                          
04F 2064 |                        STORE Index                      
050 1069 |                        LOAD IndexIncrement              
051 3060 |                        ADD ONE                          
052 2069 |                        STORE IndexIncrement             
053 9045 |                        JUMP while3                      
054 D067 |  SwapSubProgram        LOADI IndexComparing             
055 2063 |                        STORE temp                      /int temp = a;	
056 D066 |                        LOADI IndexLooking               
057 E067 |                        STOREI IndexComparing           /a = b;
058 1063 |                        LOAD temp                        
059 E066 |                        STOREI IndexLooking             /b = temp;
05A 1067 |  ifcomparing           LOAD IndexComparing              
05B 4002 |                        SUBT EAddr                       
05C 8400 |                        SKIPCOND 400                     
05D 9045 |                        JUMP while3                      
05E 9027 |                        JUMP while2                      
05F 7000 |  endif                 HALT                             
060 0001 |  ONE                   DEC 1                           / int ONE = 1;
061 0000 |  ZERO                  DEC 0                           /int ZERO = 0;
062 0000 |  OutLoop               DEC 0                            
063 0000 |  temp                  DEC 0                            
064 0000 |  Index                 DEC 0                            
065 0000 |  InLoop                DEC 0                            
066 0000 |  IndexLooking          DEC 0                            
067 0000 |  IndexComparing        DEC 0                            
068 0000 |  IndexLookingValue     DEC 0                            
069 0003 |  IndexIncrement        HEX 0003                         

Assembly successful.

         SYMBOL TABLE
         -----------------------------------------------------------------
          Symbol                | Defined | References 
         -----------------------+---------+-------------------------------
          BAddr                 |   001   | 01D
          Count                 |   01A   | 023, 027, 029, 02B
          DATA_B                |   003   | 
          DATA_E                |   019   | 
          EAddr                 |   002   | 047, 05B
          InLoop                |   065   | 02A, 03D, 03F
          IncrementInLoop       |   03D   | 
          IncrementIndexLooking |   039   | 037
          IncrementOutLoop      |   041   | 
          Index                 |   064   | 046, 04B, 04D, 04F
          IndexComparing        |   067   | 021, 031, 034, 054, 057, 05A
          IndexIncrement        |   069   | 045, 050, 052
          IndexLooking          |   066   | 01F, 02F, 032, 039, 03B, 056, 
                                |         | 059
          IndexLookingValue     |   068   | 033, 035
          ONE                   |   060   | 01E, 030, 03A, 03E, 042, 04E, 
                                |         | 051
          OutLoop               |   062   | 01C, 022, 028, 041, 043
          SwapSubProgram        |   054   | 038
          ZERO                  |   061   | 01B, 020
          dopart                |   04B   | 049
          endif                 |   05F   | 04A
          if                    |   02F   | 02D
          ifcomparing           |   05A   | 
          start                 |   01B   | 000
          temp                  |   063   | 055, 058
          while                 |   022   | 044
          while2                |   027   | 025, 03C, 040, 05E
          while3                |   045   | 026, 02E, 053, 05D
         -----------------------------------------------------------------

