/
/ Term Project Part 2 (BubbleSort), Computer Organization I
/ Name: Blake Brooks  
/
	ORG	0
	JUMP	start
BAddr,	hex	0003	/ DATA_B = 0003 (hex)
EAddr,	hex	0019	/ DATA_E = 0019 (hex)

	/ data section begins
DATA_B,	hex	0512	/ data begin
	hex	0091
	hex	0906
	hex	00CA
	hex	001A
	hex	00AF
	hex	0C25
	hex	0038
	hex	0131
	hex	00B9
	hex	0039
	hex	0050
	hex	0005
	hex	00BD
	hex	065F
	hex	0059
	hex	0F08
	hex	0BAB
	hex	0040
	hex	007A
	hex	03D1
	hex	0030
DATA_E,	hex	00FE	/ data end

Count,	dec	23	/ the number of data
/
/ do not modify codes above
/ add code/data below
/
start, load ZERO    / Your first instruction begins here!!!
	store	OutLoop	/int OutLoop = ZERO;
	load	BAddr
	Add	ONE	/Add one to Beginning Address 
	store	IndexLooking /Store into accumulator
	load	ZERO	/Load value of 0
	store	IndexComparing	/Store into the value of IndexComparing
while,  load	ONE
	store	InLoop	
	load	OutLoop	/loading OutLoop for starting while loop
	subt	Count		/subtracting Count to compare the value in the accumulator to 0
	skipcond	400	/if(OutLoop == Count)
	jump	while2		/ If what is in the accumulator is equal to 0, skip jump to 2nd while loop and jump to the 3rd
	jump	while3	/break
while2,	load	Count	/load count to start to subtract from OutLoop and compare to InLoop
	subt	OutLoop
	store	tempCount
	load	InLoop
	subt	tempCount	
	skipcond	400	/if(InLoop == Count - Outloop)
	jump	if	/if accumulator value is equal to zero, skip this line, otherwise jump to the if label
	jump	while3	/break
if,	load	IndexLooking	/loading value to start at 2nd database vale, database[1] in terms of C++
	   subt	ONE		/ subtracting 1 to look to the left of where we are currently looking and storing into IndexComparing
	   store	IndexComparing
	   loadi	IndexLooking	/load value of what is at the address of IndexLooking
	   store	IndexLookingValue   /stroe the address value into variable
	   loadi	 IndexComparing
	subt	IndexLookingValue
	skipcond	800	/if(Data[InLoop - ONE] > Data[InLoop]
	jump	IncrementIndexLooking
	jump	SwapSubProgram
IncrementIndexLooking,	load	IndexLooking
	Add	ONE
	Store	IndexLooking
IncrementInLoop,	load	InLoop
			Add	ONE
			store	InLoop	/InLoop = InLoop + ONE;
			jump	while2	/jump to the 2nd while loop label
IncrementOutLoop,	load	OutLoop	
			Add	ONE
			Store	OutLoop	/OutLoop = OutLoop + ONE;
			jump	while	   /jump to the first while loop
while3,	load	IndexIncrement	   / load the value of the IndexIncrement variable
	store	Index	/store it into Index
	subt	EAddr	/subtract index from ending address to make sure the index is in range of database values
	skipcond	400	/ if values are equal then skip the dopart label and halt the program
	jump	dopart
	jump	endif
dopart,	loadi	Index	/load the value stored at the address of Index
		output	Index	/output the value
		load	Index	/load value of Index
		Add	ONE	     /Add one to look at next part of database
		store	Index	/store in Index 
		load	IndexIncrement	
		Add	 ONE
		store	IndexIncrement
		jump	while3	/jump to the 3rd while loop label
SwapSubProgram,	loadi	IndexComparing
	store	temp	/int temp = a;	
	loadi	IndexLooking
	storei	IndexComparing	/a = b;
	load	temp
	storei	IndexLooking	/b = temp;
ifcomparing,	load	IndexComparing
		    subt	EAddr	/Check to make sure that we aren't outside the database range
		    skipcond	000	/If the value of the accumulator is less than 0 then skip while3 label
			jump	while2
			jump	IncrementOutLoop
endif,	halt
ONE,	Dec	1	/ int ONE = 1;
ZERO,	DEC	0	/int ZERO = 0;
OutLoop,	Dec	0	/ int OutLoop = ZERO;
temp,	Dec	0
Index,	Dec	0	/int Index = ZERO;
InLoop,	Dec	0
IndexLooking,	Dec	0
IndexComparing,	Dec	0
IndexLookingValue,	Dec	0
IndexIncrement,	hex	0003
tempCount,	Dec	0